/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "argovue/apis/argovue.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppConfigLister helps list AppConfigs.
type AppConfigLister interface {
	// List lists all AppConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.AppConfig, err error)
	// AppConfigs returns an object that can list and get AppConfigs.
	AppConfigs(namespace string) AppConfigNamespaceLister
	AppConfigListerExpansion
}

// appConfigLister implements the AppConfigLister interface.
type appConfigLister struct {
	indexer cache.Indexer
}

// NewAppConfigLister returns a new AppConfigLister.
func NewAppConfigLister(indexer cache.Indexer) AppConfigLister {
	return &appConfigLister{indexer: indexer}
}

// List lists all AppConfigs in the indexer.
func (s *appConfigLister) List(selector labels.Selector) (ret []*v1.AppConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppConfig))
	})
	return ret, err
}

// AppConfigs returns an object that can list and get AppConfigs.
func (s *appConfigLister) AppConfigs(namespace string) AppConfigNamespaceLister {
	return appConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppConfigNamespaceLister helps list and get AppConfigs.
type AppConfigNamespaceLister interface {
	// List lists all AppConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AppConfig, err error)
	// Get retrieves the AppConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.AppConfig, error)
	AppConfigNamespaceListerExpansion
}

// appConfigNamespaceLister implements the AppConfigNamespaceLister
// interface.
type appConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppConfigs in the indexer for a given namespace.
func (s appConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.AppConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppConfig))
	})
	return ret, err
}

// Get retrieves the AppConfig from the indexer for a given namespace and name.
func (s appConfigNamespaceLister) Get(name string) (*v1.AppConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("appconfig"), name)
	}
	return obj.(*v1.AppConfig), nil
}
